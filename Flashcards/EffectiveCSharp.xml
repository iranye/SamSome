<question>
[Item 1]
Use ________ Instead of Accessible Data Members.
</question>
Properties

<question>
[Item 1]
What are some benefits to using Properties?
</question>
They allow for simplier changes in the future
Supports:
multi-threading
virtual (i.e, all features of a method)

<question>
What are Generics?
</question>
Using type parameters (added in 2.0), that let youÂ design classes and methods that defer the specification of one or more types until the class or method is declared and instantiated by client code.

<question>
[Item 1]
Define a generic interface for a name-value pair using Properties.
</question>
public interface INameValuePair&lt;T&gt;{
string Name{get;}
T Value{get;set;}
}

<question>
[Item 1]
Can Properties be combine with Indexers?
</question>
Yes.
public int this[int index]{
get { return theValues[index]; }
set { theValues[index] = value; }
}
// Accessing an indexer:
int val = someObject[i];

<question>
[Item 2]
Prefer ________ to const
</question>
readonly

<question>
[Item 2]
const signifies a ___________ constant
readonly signifies a ____________ constant
</question>
compile-time
runtime

<question>
[Item 2]
Compile-time constants are limited to _____________.
</question>
numbers and strings

<question>
[Item 3]
Prefer the __ or __ Operators to Casts
</question>
is or as

<question>
[Item 3]
What advantage does using the as operator have over casting?
</question>
As is safer and more efficient at runtime.
The benefit applies mostly to user-defined types.

<question>
[Item 3]
user-defined conversions only operate on the __________ type of the object, not the 

____________ type.
</question>
compile-time
runtime

<question>
[Item 4]
Use ________ Instead of #if
</question>
Conditional Attributes

<question>
[Item 4]
What alternative methodology can be used instead of the #if #endif pragmas?
</question>
use the Conditional attribute.
Use this as shown with a function, which must return void and which ideally isolates conditional behavior to the function.
[Conditional("DEBUG")]
private void CheckState()
{
// Debug statements
}

<question>
[Item 5]
Always Provide ________
</question>
ToString()

<question>
[Item 5]
Why should you always define a reasonable override for the ToString() method?
</question>
Without it, it forces users to construct a human-readable representation using Properties

<question>
[Item 5]
Given the following type that implements IFormattable:
public class Customer : IFormattable
{
public string Name {get; set; }
public string Phone {get; set; }
}
Implement the ToString that allows clients to customize like the following:
customer1.ToString("np", null)
</question>
string System.IFormattable.ToString(string format, IFormatProvider fp)
{
switch (format)
{
case "np":
return string.Format("{0, 20}, {1, 15}" Name, Phone);
}
}

<question>
[Item 5]
In the previous question, what else needs to happen when implementing IFormattable.ToString()?
</question>
Must support ToString("G", ...), null, and "" (same as normal ToString())

<question>
[Item 6]
Understand the ________ Among the Many Different Concepts of Equality
</question>
Relationships

<question>
[Item 6]
What are four ways to define Equality Relationship.
</question>
public static bool ReferenceEquals(object left, object right);
public static bool Equals(object left, object right);
public virtual bool Equals(object right);
public static bool operator ==(MyClass left, MyClass right);

<question>
[Item 7]
Understand the Pitfalls of ________.  When should it ever be written?
</question>
GetHashCode().  For types that are to be used as the key in a container.

<question>
[Item 8]
Prefer Query Syntax to ________
</question>
Loops

<question>
[Item 9]
Avoid ________ Operators in your APIs.  What is one reason to do so?
</question>
Conversion
Could end up having to force users to perform casts.
Use constructors to make it clearer a new object is being created.

<question>
[Item 10]
Use Optional Parameters to Minimize ________
</question>
Method Overloads

<question>
why is it better to not change parameter names after release?
</question>
BLAH BLAH

<question>
what does the JIT compiler do?
</question>
Translates the IL generated by the C# compiler into machine code

<question>
[Item 11]
Understand the Attraction of ________ and explain.
</question>
Small Functions
When the .Net runtime invokes the JIT compiler, the CLR invokes the JITer on a function-by-function basis.  Functions that don't get called, don't get JITed.  Therefore, writing more small functions instead of fewer big functions reduces the amount of code that has to be JITed at runtime.

<question>
[Item 11] 
What is enregistration?
</question>
The process of selecting which local variables can be stored in registers rather than on the stack. 

<question>
[Item 11]
Smaller functions are better candidates for __________
</question>
inlining

<question>
The Garbage Collector:
a. Runs in its own thread
b. Compacts the managed heap each time it runs
c. Uses Mark and Compact algorithm
d. Means each object keeps track of references to it
</question>
a, b, and c are true. d is true in COM.

<question>
What happens when objects that need a Finalizer run are Garbage Collected?  For unmanaged resources, what can you do to limit the performance drain?
</question>
They aren't GC'd right away and can last several GC cycles.
Implement IDisposable interface.

<question>
[Item 12]
Prefer ________ to Assignment Statements.  In what 3 cases should you not do this?
</question>
Member Initializers
I.e., initialze member variables when you declare them instead of in the Constructor.
1. When initializing the object to 0 or null
2. When creating multiple possible initializations for the same object
3. When you need to facilitate exception handling

<question>
[Item 13]
Use Proper Initialization for ________ Class Members (e.g., Singleton)
</question>
Static

<question>
[Item 13] Implement a Singleton class.
</question>
public class MySingleton {
private static readonly MySingleton theOneAndOnly = new MySingleton();
public static MySingleton TheOnly { get { return theOneAndOnly; } }
private MySingleton() {}
}

<question>
[Item 14]
Minimize Duplicate ________ Logic. What is the order of operations for constructing the first instance of a type?
</question>
Initialization

<question>
[Item 14]
What is an example of an empty-param list constructor calling another constructor?  In C# 4.0, what is another possible approach?
</question>
public MyClass() : this(0, "")
{}
Default Parameters

<question>
[Item 14]
True or False?  String.Empty is a compile-time constant.  It can be used as the default value for a parameter.
</question>
False on both counts.  It's a static property defined on the String class.


<question>
[Item 14]
Ideally how many time should you initialize member variables during construction?
</question>
Exactly once

<question>
[Item 14]
What is the order of operations for constructing the first instance of a type?
</question>
1. Static variable storage is set to 0
2. Static variable initializers execute
3. Static constructors for the base class execute
4. Static constructor executes
5. Instance variable storage is set to 0
6. Instance variable initializers execute
7. Appropriate base class instance constructor executes
8. Instance constructor executes

<question>
[Item 15]
Utilize using and try/finally for ________ of types that support the IDisposable interface.  True or False?  Using statements can also be used for other types.
</question>
Resource Cleanup
False

<question>
[Item 15]
True or False? It is the responsibility of the system to dispose of types that use unmanaged system resources.
</question>
False.  It is the responsibility of the code that uses the type to Dispose.

<question>
[Item 15]
What can you do if you're not sure if a type implements IDisposable?
</question>
object obj = Factory.CreateResource();
using (obj as IDisposable)
   ...

<question>
[Item 15]
</question>
Less than ____ classes in the .NET Framework implement IDisposable, out of more than _____ types.
<question>
100
1500

[Item 16]
Avoid Creating ________ Objects
</question>
Unnecessary

<question>
[Item 17]
Implement the Standard Dispose ________
</question>
Pattern

<question>
[Item 18] TODO
Distinguish between ________ Types and ________ Types
</question>
Value and Reference
Value types store values and Reference types define behavior

<question>
[Item 19]
Ensure that ________ is a Valid State for a Value Type.
</question>
0

<question>
[Item 19]
Never create an ________ that doesn't include 0 as a valid choice
</question>
enum

<question>
[Item ]
________
</question>


