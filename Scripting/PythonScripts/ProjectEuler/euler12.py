import sys
import euler_base
import time
import math

def usage():
	print """\nEuler 12: 
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:
         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over 500 (or n) divisors?

    Usage:python %s n\n""" % sys.argv[0]
def get_nth_triangle_number(previous_tn, n):
    if (n is 1):
        return 1
    else:
        return previous_tn + n
def main():    """ 
    What is the value of the first triangle number to have over five hundred divisors?
    The 12375th triangle number: 76576500, has 575 divisors
    found solution in 35.4850001335 seconds
    """    if len(sys.argv) < 2:
        usage()
        sys.exit(0)
    start = time.time()
    n = int(sys.argv[1])

    i = 1
    tn = 1  # initial triangle number value
    primes_step = 100

    primes = []
    euler_base.get_nth_prime(primes, primes_step) # populate array of primes to start with    
    while True:
        tn = get_nth_triangle_number(tn, i)
        min_prime_number = int(math.sqrt(tn))
        while primes[-1] < min_prime_number:
            # get more primes as needed
            euler_base.get_nth_prime(primes, len(primes) + primes_step)

        # determine the factors of tn that are prime numbers
        prime_factors = []
        euler_base.get_prime_factors(primes, prime_factors, tn)
        # print "tn: %d, prime_factors: %s" % (tn, prime_factors)

        # use list of primes to determine all divisors of tn        divisors = euler_base.get_divisors(set(prime_factors), tn, include_n=True)
        # print "divisors: %s" % divisors
        
        if len(divisors) > n:
            # print "the %dth triangle number: %d, has %d divisors.  divisors: %s" % (i, tn, len(divisors), divisors)
            print "The %dth triangle number: %d, has %d divisors" % (i, tn, len(divisors))
            break
        i += 1
    end = time.time() - start
    print "found solution in %s seconds" % str(end)
if __name__ == '__main__':
    main()