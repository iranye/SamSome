<Aliases>
-- Show aliases to commands
get-command  | where-object{$_.CommandType -eq "Alias"} | sort-object Name

-- Show Alias by alias-name
get-alias -Name gal
-- or just
get-alias gal

-- Show Alias by Definition
get-alias -Definition "*process"

-- Make your own aliases
new-alias getc get-ChildItem
</Aliases>
<Servicemanagement>
(gsv) get-service
(gps) get-process -Name lsass
</Servicemanagement>
<Processes>
Use -WhatIf to see what would happen
gps [b-t]*[c-r] | stop-process -whatif
What if: Performing operation "Stop-Process" on Target "baretail (1352)".
What if: Performing operation "Stop-Process" on Target "BatchMaker (4028)".

-- Killing Processes
PS > $process = gps notepad
PS > $process

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
     49       2     1024       4180    30            5512 notepad
     41       2     1008       3544    30            5804 notepad

$process[1].Kill()
</Processes>
<RemoteManagement>
restart-computer "MPSD-ER04H3" -credential "amr\imnyex" -force
</RemoteManagement>
<Filtering>
-- Filter with substring match search
PS > gps | Where-Object { $_.Name -like "*ote*" }

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
     41       2     1084        540    31     0.05   5664 notepad
     41       2     1084        532    31     0.03   5876 notepad
    205       7    10100      17092    68    10.95   3132 notepad++
    
</Filtering>
<Calculations>
-- Show how many CDs it would take to back up 40 GBs
PS > 40GB
42949672960
PS > 40GB / 650MB
63.0153846153846
</Calculations>
<.Net>
-- Access .Net Framework types
PS > $now=[DateTime]::Now
PS > [System.DateTime]::IsLeapYear($now.Year)
True

[void][reflection.assembly]::LoadWithPartialName("System.Windows.Forms")
$form=New-Object Windows.Forms.Form
$form.Text="My First Form"
$button=New-Object Windows.Forms.Button
$button.Text="PushMe!"
$button.Dock="fill"
$button.add_click({$form.close()})
$form.controls.add($button)
$form.Add_Shown({$form.Activate()})
$form.ShowDialog()
</.Net>
<FileSystem>
-- list files whose name does not match filter
list | where-object {$_.Name -ne "NewlingBug.png"}

-- Perform an operation on each item in a list, e.g., remove the r attribute on items in a directory:
dir *.txt | foreach-object { attrib -r $_ }

dir $env:windir\*.log | Select-String -List error | format-table path,linenumber -Autosize
</FileSystem>
<DataStructures>
-- Access items in a list by a property name
$h = dir | group -AsHash -AsString Length

Name                           Value
----                           -----
1125                           {esp.ini}
2                              {IntegrityClient.rcLANGROUP_UTE_verificationCookie}
...

$h["1125"]

    Directory: C:\Documents and Settings\ute_verification


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
-a---          3-2-2012   8:27 AM       1125 esp.ini

</DataStructures>
<XML>
PS >$foo=gc .\ProductCatalog.xml
PS >$xmlContent = [xml]$foo
PS >$xmlContent.productCatalog

catalogName                             expiryDate                              products
-----------                             ----------                              --------
Freeman and Freeman Unique Catalog 2010 2012-01-01                              products
</XML>
<Functions>
function Write-InputObject
{
	param($Parameter1)
	process {
		if ($Parameter1)
		{
			"${Parameter1}:$_"
		} else {
			"$_"
		}
	}
}
</Functions>
<Misc>
function prompt{"PS > "}

([xml](New-Object net.webclient).Downloadstring("http://blogs.msdn.com/powershell/rss.aspx")).rss.channel.item|format-table title,link

trace-command -name parameterbinding -option All -expression { 123 | write } -PSHost

gcm format-*

"$(for ($i=1; $i -le 10; $i++) { $i })"
1 2 3 4 5 6 7 8 9 10

$x=0
1..3|foreach{"x is $($x++; $x)"}

PS C:\temp> $str=@"
>> first line
>> second line
>> "@
>>

Split a string (similar to unix tr command):
$m="EM1,500,17,17:EM2,500,17,17:E4T,0,0,0:E8T,0,0,0:EC35,0,0,0:LD5,500,0,0:LD6,500,0,0:E4P,500,0,0:E4,500,0,0:E7S POLAR,500,0,0:E7D POLAR,500,0,0:E8P,500,0,0:E4P-S4092 POLAR,500,0,0"
$m -split ":"
</Misc>